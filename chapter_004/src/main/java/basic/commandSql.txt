По умолчанию PostgreSQL подразумевает, что для входа будет использоваться роль, одноименная системному пользователю, и что такая роль будет подключаться к одноименной базе данных.

Но в данном случае это не так, потому нужно явно указать опции. Для этого используйте синтаксис:

psql -U user_name -d database_name -h 127.0.0.1 -W

//-----------------------------------------
## полезные команды - https://kamaok.org.ua/?p=961
\l  - view all database;
\dt  - view all tables in current db
\du - Просмотр списка всех пользователей и их привилегий
select * from pg_user; - Для просмотра всех пользователей СУБД
//====================
+ create table =
CREATE TABLE cities (
name varchar(80),
location point
);

+ insert =
INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');

+ copy from file =
COPY weather FROM '/home/user/weather.txt';

+ view tables =
SELECT * FROM weather;
Здесь * — это краткое обозначение «всех столбцов».
Таким образом, это равносильно записи:
SELECT city, temp_lo, temp_hi, prcp, date FROM weather;

+ выборка =
SELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;

+ вывод по порядку =
SELECT * FROM weather
ORDER BY city;

SELECT * FROM weather
ORDER BY city, temp_lo;

+соединение таблиц =
SELECT *
FROM weather, cities
WHERE city = name;

SELECT weather.city, weather.temp_lo, weather.temp_hi,
weather.prcp, weather.date, cities.location
FROM weather, cities
WHERE cities.name = weather.city;

SELECT *
FROM weather w, cities c
WHERE w.city = c.name;

+ агрегатные функции
SELECT max(temp_lo) FROM weather;

SELECT city FROM weather
WHERE temp_lo = (SELECT max(temp_lo) FROM weather);

+изменение данных
UPDATE weather SET temp_hi = temp_hi - 2, temp_lo = temp_lo - 2
WHERE date > '1994-11-28';

+удаление данных
DELETE FROM weather WHERE city = 'Hayward';

DELETE FROM имя_таблицы;

+ удаление таблицы всей
DROP TABLE имя_таблицы;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ Представления
CREATE VIEW myview AS
SELECT city, temp_lo, temp_hi, prcp, date, location
FROM weather, cities
WHERE city = name;
SELECT * FROM myview;
Вы можете создать представление по данному запросу, фактически присвоить
имя запросу, а затем обращаться к нему как к обычной таблице:

+ Внешние ключи
хотите добиться, чтобы никто не мог вставить в таблицу weather строки, для которых не находится
соответствующая строка в таблице cities. Это называется обеспечением ссылочной целостности
данных.
CREATE TABLE cities (
city varchar(80) primary key, location point);
CREATE TABLE weather (city varchar(80) references cities(city),
temp_lo int, temp_hi int, prcp real, date date );

+ Транзакции





